{"version":3,"sources":["../src/page.js"],"names":["wikiPage","get","rest","obj","first","firstValue","Object","keys","getFileName","text","indexOf","split","name","apiOptions","generator","gimlimit","prop","iiprop","titles","raw","title","then","res","query","pages","map","id","rvprop","rvsection","rawInfo","wikitext","parser","general","info","length","toLowerCase","_wikitext","key","metadata","hasOwnProperty","rawPageInfo","html","rvlimit","rvparse","pageid","revisions","content","explaintext","extract","summary","exintro","images","rawImages","image","imageinfo","reduce","imageInfos","list","url","references","ellimit","extlinks","link","links","plnamespace","pllimit","limit","aggregated","_pagination","categories","category","coordinates","page","data","backlinks","bllimit","bltitle","mainImage","Promise","all","bildname","imagen","Immagine","badge","logo","mainImageName","sort","b","a","find","filename","replace","langlinks","lllimit","lang","fullInfo","tables","lists"],"mappings":"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","file":"page.js","sourcesContent":["import { aggregatePagination, pagination, api } from './util';\nimport infoboxParser from 'infobox-parser';\nimport { parseCoordinates } from './coordinates';\n\nconst get = (obj, first, ...rest) => {\n  if (obj === undefined || first === undefined) return obj;\n  if (typeof first === 'function') {\n    return get(first(obj), ...rest);\n  }\n  return get(obj[first], ...rest);\n};\n\nconst firstValue = obj => {\n  if (typeof obj === 'object') return obj[Object.keys(obj)[0]];\n  return obj[0];\n};\n\nconst getFileName = text => {\n  if (!text) return undefined;\n  if (text.indexOf(':') !== -1) {\n    const [, name] = text.split(':');\n    return name;\n  }\n  return text;\n};\n\n/**\n * WikiPage\n * @namespace WikiPage\n */\nexport default function wikiPage(rawPageInfo, apiOptions) {\n  const raw = rawPageInfo;\n\n  /**\n   * HTML from page\n   * @example\n   * wiki.page('batman').then(page => page.html()).then(console.log);\n   * @method WikiPage#html\n   * @return {Promise}\n   */\n  function html() {\n    return api(apiOptions, {\n      prop: 'revisions',\n      rvprop: 'content',\n      rvlimit: 1,\n      rvparse: '',\n      titles: raw.title\n    }).then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n  }\n\n  /**\n   * Text content from page\n   * @example\n   * wiki.page('batman').then(page => page.content()).then(console.log);\n   * @method WikiPage#content\n   * @return {Promise}\n   */\n  function content() {\n    return api(apiOptions, {\n      prop: 'extracts',\n      explaintext: '',\n      titles: raw.title\n    }).then(res => res.query.pages[raw.pageid].extract);\n  }\n\n  /**\n   * Text summary from page\n   * @example\n   * wiki.page('batman').then(page => page.summary()).then(console.log);\n   * @method WikiPage#summary\n   * @return {Promise}\n   */\n  function summary() {\n    return api(apiOptions, {\n      prop: 'extracts',\n      explaintext: '',\n      exintro: '',\n      titles: raw.title\n    }).then(res => res.query.pages[raw.pageid].extract);\n  }\n\n  /**\n   * Raw data from images from page\n   * @example\n   * wiki.page('batman').then(page => page.rawImages()).then(console.log);\n   * @method WikiPage#rawImages\n   * @return {Promise}\n   */\n  function rawImages() {\n    return api(apiOptions, {\n      generator: 'images',\n      gimlimit: 'max',\n      prop: 'imageinfo',\n      iiprop: 'url',\n      titles: raw.title\n    }).then(res => {\n      if (res.query) {\n        return Object.keys(res.query.pages).map(id => res.query.pages[id]);\n      }\n      return [];\n    });\n  }\n\n  /**\n   * Main image URL from infobox on page\n   * @example\n   * wiki.page('batman').then(page => page.mainImage()).then(console.log);\n   * @method WikiPage#mainImage\n   * @return {Promise}\n   */\n  function mainImage() {\n    return Promise.all([rawImages(), info()]).then(([images, info]) => {\n      // Handle different translations of \"image\" here\n      const mainImageName = getFileName(\n        info.image ||\n          info.bildname ||\n          info.imagen ||\n          info.Immagine ||\n          info.badge ||\n          info.logo\n      );\n      // Handle case where no info box exists\n      if (!mainImageName) {\n        return rawInfo().then(text => {\n          if (!images.length) return undefined;\n          // Sort images by what is seen first in page's info text\n          images.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\n          const image = images[0];\n          return image.imageinfo.length > 0\n            ? image.imageinfo[0].url\n            : undefined;\n        });\n      }\n      const image = images.find(({ title }) => {\n        const filename = getFileName(title);\n        // Some wikis use underscores for spaces, some don't\n        return (\n          filename === mainImageName ||\n          filename.replace(/\\s/g, '_') === mainImageName\n        );\n      });\n      return image && image.imageinfo.length > 0\n        ? image.imageinfo[0].url\n        : undefined;\n    });\n  }\n\n  /**\n   * Image URL's from page\n   * @example\n   * wiki.page('batman').then(page => page.image()).then(console.log);\n   * @method WikiPage#images\n   * @return {Promise}\n   */\n  function images() {\n    return rawImages().then(images => {\n      return images\n        .map(image => image.imageinfo)\n        .reduce((imageInfos, list) => [...imageInfos, ...list], [])\n        .map(info => info.url);\n    });\n  }\n\n  /**\n   * References from page\n   * @example\n   * wiki.page('batman').then(page => page.references()).then(console.log);\n   * @method WikiPage#references\n   * @return {Promise}\n   */\n  function references() {\n    return api(apiOptions, {\n      prop: 'extlinks',\n      ellimit: 'max',\n      titles: raw.title\n    }).then(res => res.query.pages[raw.pageid].extlinks.map(link => link['*']));\n  }\n\n  /**\n   * Paginated links from page\n   * @example\n   * wiki.page('batman').then(page => page.links()).then(console.log);\n   * @method WikiPage#links\n   * @param  {Boolean} [aggregated] - return all links (default is true)\n   * @param  {Number} [limit] - number of links per page\n   * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n   */\n  function links(aggregated = true, limit = 100) {\n    const _pagination = pagination(\n      apiOptions,\n      {\n        prop: 'links',\n        plnamespace: 0,\n        pllimit: limit,\n        titles: raw.title\n      },\n      res => res.query.pages[raw.pageid].links.map(link => link.title)\n    );\n    if (aggregated) {\n      return aggregatePagination(_pagination);\n    }\n    return _pagination;\n  }\n\n  /**\n   * Paginated categories from page\n   * @example\n   * wiki.page('batman').then(page => page.categories()).then(console.log);\n   * @method WikiPage#categories\n   * @param  {Boolean} [aggregated] - return all categories (default is true)\n   * @param  {Number} [limit] - number of categories per page\n   * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n   */\n  function categories(aggregated = true, limit = 100) {\n    const _pagination = pagination(\n      apiOptions,\n      {\n        prop: 'categories',\n        pllimit: limit,\n        titles: raw.title\n      },\n      res =>\n        res.query.pages[raw.pageid].categories.map(category => category.title)\n    );\n    if (aggregated) {\n      return aggregatePagination(_pagination);\n    }\n    return _pagination;\n  }\n\n  /**\n   * Geographical coordinates from page\n   * @example\n   * wiki().page('Texas').then(texas => texas.coordinates())\n   * @method WikiPage#coordinates\n   * @return {Promise}\n   */\n  function coordinates() {\n    return api(apiOptions, {\n      prop: 'coordinates',\n      titles: raw.title\n    }).then(res => {\n      const page = res.query.pages[raw.pageid];\n      if (page.coordinates) {\n        return page.coordinates[0];\n      }\n      // No coordinates for this page, check infobox for deprecated version\n      return info().then(data => parseCoordinates(data));\n    });\n  }\n\n  function rawInfo(title) {\n    return api(apiOptions, {\n      prop: 'revisions',\n      rvprop: 'content',\n      rvsection: 0,\n      titles: title || raw.title\n    }).then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'));\n  }\n\n  /**\n   * Fetch and parse lists within page\n   * @method WikiPage#lists\n   * @return {Promise} Resolves to a collection of lists\n   */\n  function lists() {\n    return api(apiOptions, {\n      prop: 'revisions',\n      rvprop: 'content',\n      titles: raw.title\n    })\n      .then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'))\n      .then(wikitext => infoboxParser(wikitext, apiOptions.parser).lists);\n  }\n\n  /**\n   * Fetch and parse tables within page\n   * @method WikiPage#tables\n   * @return {Promise} Resolves to a collection of tables\n   */\n  function tables() {\n    return api(apiOptions, {\n      prop: 'revisions',\n      rvprop: 'content',\n      titles: raw.title\n    })\n      .then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'))\n      .then(wikitext => infoboxParser(wikitext, apiOptions.parser).tables);\n  }\n\n  /**\n   * Get general information from page, with optional specifc property\n   * @deprecated This method will be dropped and replaced with the `fullInfo` implementation in v5\n   * @example\n   * new Wiki().page('Batman').then(page => page.info('alter_ego'));\n   * @method WikiPage#info\n   * @param  {String} [key] - Information key. Falsy keys are ignored\n   * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\n   */\n  function info(key) {\n    return rawInfo()\n      .then(wikitext => {\n        // Use general data for now...\n        const info = infoboxParser(wikitext, apiOptions.parser).general;\n        if (Object.keys(info).length === 0) {\n          // If empty, check to see if this page has a templated infobox\n          return rawInfo(`Template:Infobox ${raw.title.toLowerCase()}`).then(\n            _wikitext =>\n              infoboxParser(_wikitext || '', apiOptions.parser).general\n          );\n        }\n        return info;\n      })\n      .then(metadata => {\n        if (!key) {\n          return metadata;\n        }\n        if (metadata.hasOwnProperty(key)) {\n          return metadata[key];\n        }\n      });\n  }\n\n  /**\n   * Get the full infobox data, parsed in a easy to use manner\n   * @example\n   * new Wiki().page('Batman').then(page => page.fullInfo()).then(info => info.general.aliases);\n   * @method WikiPage#fullInfo\n   * @return {Promise} - Parsed object of all infobox data\n   */\n  function fullInfo() {\n    return rawInfo().then(wikitext =>\n      infoboxParser(wikitext, apiOptions.parser)\n    );\n  }\n\n  /**\n   * Paginated backlinks from page\n   * @method WikiPage#backlinks\n   * @param  {Boolean} [aggregated] - return all backlinks (default is true)\n   * @param  {Number} [limit] - number of backlinks per page\n   * @return {Promise} - includes results [and next function for more results if not aggregated]\n   */\n  function backlinks(aggregated = true, limit = 100) {\n    const _pagination = pagination(\n      apiOptions,\n      {\n        list: 'backlinks',\n        bllimit: limit,\n        bltitle: raw.title\n      },\n      res => res.query.backlinks.map(link => link.title)\n    );\n    if (aggregated) {\n      return aggregatePagination(_pagination);\n    }\n    return _pagination;\n  }\n\n  /**\n   * Get list of links to different translations\n   * @method WikiPage#langlinks\n   * @return {Promise} - includes link objects { lang, title }\n   */\n  function langlinks() {\n    return api(apiOptions, {\n      prop: 'langlinks',\n      lllimit: 'max',\n      titles: raw.title\n    }).then(res =>\n      res.query.pages[raw.pageid].langlinks.map(link => {\n        return {\n          lang: link.lang,\n          title: link['*']\n        };\n      })\n    );\n  }\n\n  const page = {\n    raw,\n    html,\n    content,\n    summary,\n    images,\n    references,\n    links,\n    categories,\n    coordinates,\n    info,\n    backlinks,\n    rawImages,\n    mainImage,\n    langlinks,\n    rawInfo,\n    fullInfo,\n    tables,\n    lists\n  };\n\n  return page;\n}\n"]}